// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    return value.toBigInt();
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }
}

export class AuctionSuccessfulEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AuctionSuccessfulEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionSuccessfulEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionSuccessfulEntity", id.toString(), this);
  }

  static load(id: string): AuctionSuccessfulEntity | null {
    return store.get(
      "AuctionSuccessfulEntity",
      id
    ) as AuctionSuccessfulEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    return value.toBigInt();
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get _totalPrice(): BigInt {
    let value = this.get("_totalPrice");
    return value.toBigInt();
  }

  set _totalPrice(value: BigInt) {
    this.set("_totalPrice", Value.fromBigInt(value));
  }

  get _winner(): Bytes {
    let value = this.get("_winner");
    return value.toBytes();
  }

  set _winner(value: Bytes) {
    this.set("_winner", Value.fromBytes(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _payToken(): Bytes {
    let value = this.get("_payToken");
    return value.toBytes();
  }

  set _payToken(value: Bytes) {
    this.set("_payToken", Value.fromBytes(value));
  }
}

export class AuctionCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AuctionCreatedEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionCreatedEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionCreatedEntity", id.toString(), this);
  }

  static load(id: string): AuctionCreatedEntity | null {
    return store.get("AuctionCreatedEntity", id) as AuctionCreatedEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    return value.toBigInt();
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get _startingPrice(): BigInt {
    let value = this.get("_startingPrice");
    return value.toBigInt();
  }

  set _startingPrice(value: BigInt) {
    this.set("_startingPrice", Value.fromBigInt(value));
  }

  get _endingPrice(): BigInt {
    let value = this.get("_endingPrice");
    return value.toBigInt();
  }

  set _endingPrice(value: BigInt) {
    this.set("_endingPrice", Value.fromBigInt(value));
  }

  get _duration(): BigInt {
    let value = this.get("_duration");
    return value.toBigInt();
  }

  set _duration(value: BigInt) {
    this.set("_duration", Value.fromBigInt(value));
  }

  get _seller(): Bytes {
    let value = this.get("_seller");
    return value.toBytes();
  }

  set _seller(value: Bytes) {
    this.set("_seller", Value.fromBytes(value));
  }

  get _payToken(): Bytes {
    let value = this.get("_payToken");
    return value.toBytes();
  }

  set _payToken(value: Bytes) {
    this.set("_payToken", Value.fromBytes(value));
  }
}

export class CreateAuctionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreateAuctionEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreateAuctionEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreateAuctionEntity", id.toString(), this);
  }

  static load(id: string): CreateAuctionEntity | null {
    return store.get("CreateAuctionEntity", id) as CreateAuctionEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    return value.toBigInt();
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get _startingPrice(): BigInt {
    let value = this.get("_startingPrice");
    return value.toBigInt();
  }

  set _startingPrice(value: BigInt) {
    this.set("_startingPrice", Value.fromBigInt(value));
  }

  get _endingPrice(): BigInt {
    let value = this.get("_endingPrice");
    return value.toBigInt();
  }

  set _endingPrice(value: BigInt) {
    this.set("_endingPrice", Value.fromBigInt(value));
  }

  get _duration(): BigInt {
    let value = this.get("_duration");
    return value.toBigInt();
  }

  set _duration(value: BigInt) {
    this.set("_duration", Value.fromBigInt(value));
  }

  get _payToken(): Bytes {
    let value = this.get("_payToken");
    return value.toBytes();
  }

  set _payToken(value: Bytes) {
    this.set("_payToken", Value.fromBytes(value));
  }
}

export class BidEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidEntity", id.toString(), this);
  }

  static load(id: string): BidEntity | null {
    return store.get("BidEntity", id) as BidEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    return value.toBigInt();
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get _bidAmount(): BigInt {
    let value = this.get("_bidAmount");
    return value.toBigInt();
  }

  set _bidAmount(value: BigInt) {
    this.set("_bidAmount", Value.fromBigInt(value));
  }

  get _payToken(): Bytes {
    let value = this.get("_payToken");
    return value.toBytes();
  }

  set _payToken(value: Bytes) {
    this.set("_payToken", Value.fromBytes(value));
  }
}

export class ApprovalEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ApprovalEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ApprovalEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ApprovalEntity", id.toString(), this);
  }

  static load(id: string): ApprovalEntity | null {
    return store.get("ApprovalEntity", id) as ApprovalEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}
