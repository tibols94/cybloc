// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCancelled extends ethereum.Event {
  get params(): AuctionCancelled__Params {
    return new AuctionCancelled__Params(this);
  }
}

export class AuctionCancelled__Params {
  _event: AuctionCancelled;

  constructor(event: AuctionCancelled) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _startingPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _endingPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _seller(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get _payToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class AuctionSuccessful extends ethereum.Event {
  get params(): AuctionSuccessful__Params {
    return new AuctionSuccessful__Params(this);
  }
}

export class AuctionSuccessful__Params {
  _event: AuctionSuccessful;

  constructor(event: AuctionSuccessful) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _totalPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _payToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class cyblocbidandaution__auctionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class cyblocbidandaution__getAuctionResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class cyblocbidandaution extends ethereum.SmartContract {
  static bind(address: Address): cyblocbidandaution {
    return new cyblocbidandaution("cyblocbidandaution", address);
  }

  acceptPayTokens(param0: Address): boolean {
    let result = super.call(
      "acceptPayTokens",
      "acceptPayTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_acceptPayTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptPayTokens",
      "acceptPayTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auctions(
    param0: Address,
    param1: BigInt
  ): cyblocbidandaution__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(address,uint256):(address,uint128,uint128,uint64,uint64,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new cyblocbidandaution__auctionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_auctions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<cyblocbidandaution__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(address,uint256):(address,uint128,uint128,uint64,uint64,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new cyblocbidandaution__auctionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuction(
    _nftAddress: Address,
    _tokenId: BigInt
  ): cyblocbidandaution__getAuctionResult {
    let result = super.call(
      "getAuction",
      "getAuction(address,uint256):(address,uint256,uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return new cyblocbidandaution__getAuctionResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_getAuction(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<cyblocbidandaution__getAuctionResult> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(address,uint256):(address,uint256,uint256,uint256,uint256,address)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new cyblocbidandaution__getAuctionResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  getCurrentPrice(_nftAddress: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketFee(): BigInt {
    let result = super.call("marketFee", "marketFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_marketFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("marketFee", "marketFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marketFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CancelAuctionWhenPausedCall extends ethereum.Call {
  get inputs(): CancelAuctionWhenPausedCall__Inputs {
    return new CancelAuctionWhenPausedCall__Inputs(this);
  }

  get outputs(): CancelAuctionWhenPausedCall__Outputs {
    return new CancelAuctionWhenPausedCall__Outputs(this);
  }
}

export class CancelAuctionWhenPausedCall__Inputs {
  _call: CancelAuctionWhenPausedCall;

  constructor(call: CancelAuctionWhenPausedCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelAuctionWhenPausedCall__Outputs {
  _call: CancelAuctionWhenPausedCall;

  constructor(call: CancelAuctionWhenPausedCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _endingPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAcceptPayTokenCall extends ethereum.Call {
  get inputs(): SetAcceptPayTokenCall__Inputs {
    return new SetAcceptPayTokenCall__Inputs(this);
  }

  get outputs(): SetAcceptPayTokenCall__Outputs {
    return new SetAcceptPayTokenCall__Outputs(this);
  }
}

export class SetAcceptPayTokenCall__Inputs {
  _call: SetAcceptPayTokenCall;

  constructor(call: SetAcceptPayTokenCall) {
    this._call = call;
  }

  get _payToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accept(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAcceptPayTokenCall__Outputs {
  _call: SetAcceptPayTokenCall;

  constructor(call: SetAcceptPayTokenCall) {
    this._call = call;
  }
}

export class SetMarketFeeCall extends ethereum.Call {
  get inputs(): SetMarketFeeCall__Inputs {
    return new SetMarketFeeCall__Inputs(this);
  }

  get outputs(): SetMarketFeeCall__Outputs {
    return new SetMarketFeeCall__Outputs(this);
  }
}

export class SetMarketFeeCall__Inputs {
  _call: SetMarketFeeCall;

  constructor(call: SetMarketFeeCall) {
    this._call = call;
  }

  get _marketFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMarketFeeCall__Outputs {
  _call: SetMarketFeeCall;

  constructor(call: SetMarketFeeCall) {
    this._call = call;
  }
}

export class SetMarketFeeToCall extends ethereum.Call {
  get inputs(): SetMarketFeeToCall__Inputs {
    return new SetMarketFeeToCall__Inputs(this);
  }

  get outputs(): SetMarketFeeToCall__Outputs {
    return new SetMarketFeeToCall__Outputs(this);
  }
}

export class SetMarketFeeToCall__Inputs {
  _call: SetMarketFeeToCall;

  constructor(call: SetMarketFeeToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketFeeToCall__Outputs {
  _call: SetMarketFeeToCall;

  constructor(call: SetMarketFeeToCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
